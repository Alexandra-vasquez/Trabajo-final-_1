# -*- coding: utf-8 -*-
"""src

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hDeQz-2JgGwG9Wmare637yvJE9SOMcID
"""

#librerias

import datetime
import math

#LISTAS Y VARIABLES GLOBALES


USUARIOS_REGISTRADOS = []
CARROS_PARQUEADOS = []
VEHICULOS_RETIRADOS_HISTORIAL = []

ESPACIOS_TOTALES = 64
ESPACIOS_OCUPADOS = 0
NOMBRE_PARQUEADERO = "ParqUdea"
VALOR_HORA_COMPLETA = 7000
VALOR_CUARTO_HORA = 1500

# Credenciales de administrador


ADMIN_USUARIOS = {
    "admin": "clave123",
    "gerente": "pass456"
}

# --- FUNCIONES DE VALIDACIÓN ---


def tiene_solo_letras_y_espacios(texto):
    if not texto: return False
    for caracter in texto:
        if not ('a' <= caracter <= 'z' or 'A' <= caracter <= 'Z' or caracter == ' '):
            return False
    return True

def tiene_longitud_minima(texto, minimo):
    return len(texto) >= minimo

def tiene_longitud_exacta(texto, exacta):
    return len(texto) == exacta

def tiene_solo_numeros(texto):
    if not texto: return False
    for caracter in texto:
        if not ('0' <= caracter <= '9'): return False
    return True

def validar_formato_placa(placa):
    if not tiene_longitud_exacta(placa, 6): return False
    for i in range(3):
        if not ('A' <= placa[i] <= 'Z'): return False
    for i in range(3, 6):
        if not ('0' <= placa[i] <= '9'): return False
    return True

# --- FUNCIONES DE USUARIO (REGISTRO, INGRESO, RETIRO) ---


def ver_usuarios_registrados():
    print("\n--- Usuarios Registrados en el Sistema (Actualizado) ---")
    if USUARIOS_REGISTRADOS:
        for i, user in enumerate(USUARIOS_REGISTRADOS):
            print(f"{i+1}. Nombre: {user['nombre']} {user['apellido']}, Documento: {user['documento']}, Placa: {user['placa']}")
    else:
        print("No hay usuarios registrados aún.")


def registrar_usuario():

    # ... (código completo de registrar_usuario) ...


    print("\n--- Iniciar Registro de Nuevo Usuario ---")

    while True:
        nombre = input("Ingrese el Nombre del usuario: ")
        errores_nombre = []
        if not tiene_longitud_minima(nombre, 3): errores_nombre.append("El nombre debe tener al menos 3 letras.")
        if not tiene_solo_letras_y_espacios(nombre): errores_nombre.append("El nombre no debe contener números ni caracteres especiales.")
        if errores_nombre:
            for error in errores_nombre: print(f"Error en Nombre: {error}")
        else: break

    while True:
        apellido = input("Ingrese el Apellido del usuario: ")
        errores_apellido = []
        if not tiene_longitud_minima(apellido, 3): errores_apellido.append("El apellido debe tener al menos 3 letras.")
        if not tiene_solo_letras_y_espacios(apellido): errores_apellido.append("El apellido no debe contener números ni caracteres especiales.")
        if errores_apellido:
            for error in errores_apellido: print(f"Error en Apellido: {error}")
        else: break

    while True:
        documento = input("Ingrese el Documento del usuario: ").strip()
        errores_documento = []
        if not tiene_solo_numeros(documento): errores_documento.append("El documento solo debe contener números.")
        long_doc = len(documento)
        if not (3 <= long_doc <= 15): errores_documento.append("El documento debe tener entre 3 y 15 dígitos.")
        documento_ya_existe = False
        for usuario_existente in USUARIOS_REGISTRADOS:
            if usuario_existente['documento'] == documento:
                documento_ya_existe = True
                break
        if documento_ya_existe: errores_documento.append(f"El documento {documento} ya está registrado.")
        if errores_documento:
            for error in errores_documento: print(f"Error en Documento: {error}")
        else: break

    while True:
        placa = input("Ingrese la Placa del vehículo : ").upper()
        errores_placa = []
        if not tiene_longitud_exacta(placa, 6): errores_placa.append("La placa debe tener exactamente 6 caracteres.")
        if not validar_formato_placa(placa): errores_placa.append("La placa debe tener 3 letras seguidas de 3 números")
        placa_ya_existe = False
        for usuario_existente in USUARIOS_REGISTRADOS:
            if usuario_existente['placa'] == placa:
                placa_ya_existe = True
                break
        if placa_ya_existe: errores_placa.append(f"La placa {placa} ya está asociada a otro usuario.")
        if errores_placa:
            for error in errores_placa: print(f"Error en Placa: {error}")
        else: break

    nuevo_usuario = {
        "nombre": nombre,
        "apellido": apellido,
        "documento": documento,
        "placa": placa
    }
    USUARIOS_REGISTRADOS.append(nuevo_usuario)
    print("\n--- Usuario Registrado Exitosamente ---")
    print(f"Nombre: {nombre} {apellido}")
    print(f"Documento: {documento}")
    print(f"Placa Asociada: {placa}")

    ver_usuarios_registrados()


def ingresar_vehiculo():

    # ... (código completo de ingresar_vehiculo) ...


    global ESPACIOS_OCUPADOS
    print("\n--- Ingresar Vehículo al Parqueadero ---")
    if ESPACIOS_OCUPADOS >= ESPACIOS_TOTALES:
        print("\n Lo sentimos, El parqueadero está lleno. No se puede ingresar más vehículos.")
        return
    if not USUARIOS_REGISTRADOS:
        print("\n No hay usuarios registrados en el sistema.")
        print(" Registre al menos un usuario antes de intentar ingresar un vehículo.")
        return

    placa_ingreso = input("Ingrese la PLACA del vehículo (ej. ABC123) para ingresar: ").upper()

    usuario_encontrado = None
    for user in USUARIOS_REGISTRADOS:
        if user['placa'] == placa_ingreso:
            usuario_encontrado = user
            break

    if not usuario_encontrado:
        print(f"Error: La placa {placa_ingreso} no está registrada en el sistema de usuarios.")
        return

    for carro_parqueado in CARROS_PARQUEADOS:
        if carro_parqueado['placa'] == placa_ingreso:
            print(f"Error: El vehículo con placa {placa_ingreso} ya se encuentra parqueado.")
            return

    hora_entrada = datetime.datetime.now()
    nuevo_carro_parqueado = {
        "placa": placa_ingreso,
        "documento_usuario": usuario_encontrado['documento'],
        "hora_entrada": hora_entrada
    }
    CARROS_PARQUEADOS.append(nuevo_carro_parqueado)
    ESPACIOS_OCUPADOS += 1

    print(f"\nVehículo con placa {placa_ingreso} ingresado a las {hora_entrada.strftime('%H:%M:%S')}.")
    print(f"Espacios disponibles: {ESPACIOS_TOTALES - ESPACIOS_OCUPADOS}")

    print("\n--- RECIBO DE INGRESO ---")
    print(f"Parqueadero: {NOMBRE_PARQUEADERO}")
    print(f"Placa: {placa_ingreso}")
    print(f"Usuario: {usuario_encontrado['nombre']} {usuario_encontrado['apellido']}")
    print(f"Hora de Entrada: {hora_entrada.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Espacio Asignado: {ESPACIOS_OCUPADOS}")
    print("¡Gracias por su visita!")



def retirar_vehiculo():
    # ... (código completo de retirar_vehiculo) ...
    global ESPACIOS_OCUPADOS

    print("\n--- Retirar Vehículo del Parqueadero ---")

    if not CARROS_PARQUEADOS:
        print("No hay vehículos parqueados actualmente para retirar.")
        return

    placa_retiro = input("Ingrese la PLACA del vehículo a retirar (ej. ABC123): ").upper()

    vehiculo_encontrado_idx = -1
    vehiculo_a_retirar = None

    for i, carro_parqueado in enumerate(CARROS_PARQUEADOS):
        if carro_parqueado['placa'] == placa_retiro:
            vehiculo_a_retirar = carro_parqueado
            vehiculo_encontrado_idx = i
            break

    if not vehiculo_a_retirar:
        print(f"Error: El vehículo con placa {placa_retiro} no se encuentra parqueado.")
        return

    hora_salida = datetime.datetime.now()
    hora_entrada = vehiculo_a_retirar['hora_entrada']

    tiempo_transcurrido = hora_salida - hora_entrada
    segundos_totales = tiempo_transcurrido.total_seconds()

    horas_enteras = int(segundos_totales // 3600)
    segundos_restantes = segundos_totales % 3600

    cobro_por_horas = horas_enteras * VALOR_HORA_COMPLETA

    cuartos_de_hora = 0
    if segundos_restantes > 0:
        cuartos_de_hora = math.ceil(segundos_restantes / 900)

    cobro_por_cuartos = cuartos_de_hora * VALOR_CUARTO_HORA

    total_a_pagar = cobro_por_horas + cobro_por_cuartos

    if total_a_pagar < VALOR_HORA_COMPLETA:
        total_a_pagar = VALOR_HORA_COMPLETA

    VEHICULOS_RETIRADOS_HISTORIAL.append({
        "placa": vehiculo_a_retirar['placa'],
        "documento_usuario": vehiculo_a_retirar['documento_usuario'],
        "hora_entrada": vehiculo_a_retirar['hora_entrada'],
        "hora_salida": hora_salida,
        "tiempo_total_segundos": segundos_totales,
        "pago_total": total_a_pagar
    })

    CARROS_PARQUEADOS.pop(vehiculo_encontrado_idx)
    ESPACIOS_OCUPADOS -= 1

    print("\n--- RECIBO DE RETIRO ---")
    print(f"Parqueadero: {NOMBRE_PARQUEADERO}")
    print(f"Placa: {placa_retiro}")
    print(f"Hora de Entrada: {hora_entrada.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Hora de Salida: {hora_salida.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Tiempo Total Parqueado: {tiempo_transcurrido}")
    print(f"Horas Completas: {horas_enteras}")
    print(f"Cuartos de Hora Adicionales: {cuartos_de_hora}")
    print(f"Cobro por Horas: ${cobro_por_horas:,.0f}")
    print(f"Cobro por Cuartos: ${cobro_por_cuartos:,.0f}")
    print(f"TOTAL A PAGAR: ${total_a_pagar:,.0f}")

    print(f"Espacios disponibles: {ESPACIOS_TOTALES - ESPACIOS_OCUPADOS}")

# --- MÓDULO DE ADMINISTRACIÓN ---

def login_administrador():
    """Solicita usuario y contraseña para acceder al modo administrador."""
    print("\n--- ACCESO ADMINISTRADOR ---")
    max_intentos = 3
    for intento in range(1, max_intentos + 1):
        usuario = input("Usuario: ").lower()
        contrasena = input("Contraseña:")

        if usuario in ADMIN_USUARIOS and ADMIN_USUARIOS[usuario] == contrasena:
            print("\n Acceso de administrador concedido")
            return True
        else:
            print(f"Credenciales incorrectas. Intento {intento} de {max_intentos}.")

    print("Demasiados intentos fallidos. Volviendo al menú principal.")
    return False

def mostrar_menu_administrador():
    """Muestra las opciones del submenú de administración."""
    print("\n===== MENÚ DE ADMINISTRACIÓN =====")
    print("1. Total de vehículos registrados (histórico)")
    print("2. Total de vehículos retirados (histórico)")
    print("3. Total de vehículos sin retirar (parqueados actualmente)")
    print("4. Total facturado por vehículos retirados")
    print("5. Tiempo promedio de estancia por vehículo (retirados)")
    print("6. Lista de todos los usuarios registrados")
    print("7. Vehículo con tiempo de parqueo máximo y mínimo (retirados)")
    print("8. Volver al Menú Principal")


def modulo_administracion():
    """Gestiona el submenú y los reportes del administrador."""
    if not login_administrador():
        return

    while True:
        mostrar_menu_administrador()
        opcion_admin = input("Seleccione una opción (1-8):")

        if opcion_admin == '1':
            print("\n REPORTE: Total de Vehículos Registrados")
            print(f"Total de usuarios registrados: {len(USUARIOS_REGISTRADOS)}")

        elif opcion_admin == '2':
            print("\n REPORTE: Total de Vehículos Retirados")
            print(f"Total de vehículos que han sido retirados: {len(VEHICULOS_RETIRADOS_HISTORIAL)}")

        elif opcion_admin == '3':
            print("\n REPORTE: Total de Vehículos Sin Retirar")
            print(f"Vehículos actualmente parqueados: {len(CARROS_PARQUEADOS)}")
            print(f"Espacios ocupados: {ESPACIOS_OCUPADOS}")
            print(f"Espacios disponibles: {ESPACIOS_TOTALES - ESPACIOS_OCUPADOS}")

        elif opcion_admin == '4':
            print("\n REPORTE: Total Facturado por Vehículos Retirados")
            total_facturado = sum(v['pago_total'] for v in VEHICULOS_RETIRADOS_HISTORIAL)
            print(f"Total facturado: ${total_facturado:,.0f}")

        elif opcion_admin == '5':
            print("\n REPORTE: Tiempo Promedio de Estancia por Vehículo")
            if VEHICULOS_RETIRADOS_HISTORIAL:
                sum_segundos = sum(v['tiempo_total_segundos'] for v in VEHICULOS_RETIRADOS_HISTORIAL)
                promedio_segundos = sum_segundos / len(VEHICULOS_RETIRADOS_HISTORIAL)
                promedio_hms = str(datetime.timedelta(seconds=int(promedio_segundos)))
                print(f"Tiempo promedio de estancia: {promedio_hms}")
            else:
                print("No hay vehículos retirados aún para calcular el promedio.")

        elif opcion_admin == '6':
            print("\n REPORTE: Lista de Todos los Usuarios Registrados")
            ver_usuarios_registrados()

        elif opcion_admin == '7':
            print("\n REPORTE: Vehículo con Tiempo de Parqueo Máximo y Mínimo")
            if VEHICULOS_RETIRADOS_HISTORIAL:
                min_tiempo_vehiculo = VEHICULOS_RETIRADOS_HISTORIAL[0]
                max_tiempo_vehiculo = VEHICULOS_RETIRADOS_HISTORIAL[0]

                for v in VEHICULOS_RETIRADOS_HISTORIAL:
                    if v['tiempo_total_segundos'] < min_tiempo_vehiculo['tiempo_total_segundos']:
                        min_tiempo_vehiculo = v
                    if v['tiempo_total_segundos'] > max_tiempo_vehiculo['tiempo_total_segundos']:
                        max_tiempo_vehiculo = v

                print("\nVehículo con Menor Tiempo de Estancia:")
                print(f"  Placa: {min_tiempo_vehiculo['placa']}")
                print(f"  Tiempo: {str(datetime.timedelta(seconds=int(min_tiempo_vehiculo['tiempo_total_segundos'])))}")
                print(f"  Pago: ${min_tiempo_vehiculo['pago_total']:,.0f}")

                print("\nVehículo con Mayor Tiempo de Estancia:")
                print(f"  Placa: {max_tiempo_vehiculo['placa']}")
                print(f"  Tiempo: {str(datetime.timedelta(seconds=int(max_tiempo_vehiculo['tiempo_total_segundos'])))}")
                print(f"  Pago: ${max_tiempo_vehiculo['pago_total']:,.0f}")
            else:
                print("No hay vehículos retirados aún para este reporte.")

        elif opcion_admin == '8':
            print("Volviendo al Menú Principal...")
            break
        else:
            print("\nOpción no válida. Por favor, ingrese un número del 1 al 8.")

# --- LÓGICA PRINCIPAL DEL PROGRAMA (MENÚ) ---

def mostrar_menu():
    """Muestra las opciones del menú principal."""
    print("\n===== MENÚ PRINCIPAL DEL PARQUEADERO =====")
    print("1. Registrar Nuevo Usuario")
    print("2. Ingresar Vehículo")
    print("3. Retirar Vehículo")
    print("4. Acceder como Administrador")
    print("5. Salir")


def main():
    """Función principal que ejecuta el menú del parqueadero."""
    print(f"¡Bienvenido a {NOMBRE_PARQUEADERO}!")

    while True:
        mostrar_menu()
        opcion = input("Seleccione una opción (1-5):")

        if opcion == '1':
            registrar_usuario()
        elif opcion == '2':
            ingresar_vehiculo()
        elif opcion == '3':
            retirar_vehiculo()
        elif opcion == '4':
            modulo_administracion() # Llama al módulo de administración
        elif opcion == '5':
            print("\n¡Gracias por usar el sistema del Parqueadero! Hasta pronto.")
            break
        else:
            print("\nOpción no válida. Por favor, ingrese un número del 1 al 5.")

# --- PUNTO DE ENTRADA DEL PROGRAMA ---
if __name__ == "__main__":
    main()